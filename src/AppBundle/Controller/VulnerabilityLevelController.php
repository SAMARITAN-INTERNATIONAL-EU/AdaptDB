<?php

namespace AppBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use AppBundle\Entity\VulnerabilityLevel;
use AppBundle\Form\VulnerabilityLevelType;

/**
 * VulnerabilityLevel controller.
 *
 * @package AppBundle\Controller
 * @Route("/vulnerabilitylevel")
 */
class VulnerabilityLevelController extends Controller
{
    /**
     * Lists all VulnerabilityLevel entities.
     *
     * @Route("/", name="vulnerabilitylevel_index")
     * @Method("GET")
     * @Security("has_role('ROLE_SYSTEM_ADMIN')")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $vulnerabilityLevels = $em->getRepository('AppBundle:VulnerabilityLevel')->findBy(array(), array('level' => "ASC"));

        return $this->render('vulnerabilitylevel/index.html.twig', array(
            'vulnerabilityLevels' => $vulnerabilityLevels,
        ));
    }

    /**
     * Creates a new VulnerabilityLevel entity.
     *
     * @Route("/new", name="vulnerabilitylevel_new")
     * @Method({"GET", "POST"})
     * @Security("has_role('ROLE_SYSTEM_ADMIN')")
     */
    public function newAction(Request $request)
    {
        $vulnerabilityLevel = new VulnerabilityLevel();
        $form = $this->createForm('AppBundle\Form\VulnerabilityLevelType', $vulnerabilityLevel);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($vulnerabilityLevel);
            $em->flush();

            return $this->redirectToRoute('vulnerabilitylevel_index');
        }

        return $this->render('vulnerabilitylevel/new.html.twig', array(
            'vulnerabilityLevel' => $vulnerabilityLevel,
            'form' => $form->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing VulnerabilityLevel entity.
     *
     * @Route("/{id}/edit", name="vulnerabilitylevel_edit")
     * @Method({"GET", "POST"})
     * @Security("has_role('ROLE_SYSTEM_ADMIN')")
     */
    public function editAction(Request $request, VulnerabilityLevel $vulnerabilityLevel)
    {
        $editForm = $this->createForm('AppBundle\Form\VulnerabilityLevelType', $vulnerabilityLevel);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($vulnerabilityLevel);
            $em->flush();

            return $this->redirectToRoute('vulnerabilitylevel_index');
        }

        return $this->render('vulnerabilitylevel/edit.html.twig', array(
            'vulnerabilityLevel' => $vulnerabilityLevel,
            'edit_form' => $editForm->createView(),
        ));
    }

    /**
     * Deletes a VulnerabilityLevel entity.
     *
     * @Route("/{id}/delete", name="vulnerabilitylevel_delete")
     * @Method("GET")
     * @Security("has_role('ROLE_SYSTEM_ADMIN')")
     */
    public function deleteAction($id)
    {

        $em = $this->getDoctrine()->getManager();
        $vulnerabilityLevel = $em->getRepository('AppBundle:VulnerabilityLevel')->find($id);

        if ($vulnerabilityLevel) {
            $personsWithVulnerabilityLevel = $em->getRepository('AppBundle:Person')->findOneBy(array("vulnerabilityLevel" => $vulnerabilityLevel));
            if ($personsWithVulnerabilityLevel != null) {
                $this->addFlash("error", 'Vulnerability Level "' . $vulnerabilityLevel->getName() . '" could not be deleted because there are Person-entities with reference to this entity.');
            } else {
                $em = $this->getDoctrine()->getManager();
                $em->remove($vulnerabilityLevel);
                $em->flush();
            }
        }

        return $this->redirectToRoute('vulnerabilitylevel_index');
    }
}
